{"version":3,"sources":["components/Navbar/Navbar.jsx","components/About/About.jsx","components/Live/Live.jsx","App.js","index.js"],"names":["Navbar","props","useState","click","setClick","setButton","closeMobileMenu","showButton","window","innerWidth","useEffect","addEventListener","className","href","onClick","isModelLoading","About","style","height","backgroundColor","src","autoPlay","loop","muted","tf","Live","model","setModel","webcam","setWebcam","image","setImage","state","progress","loading","setLoading","aniId","setAniId","inputImage","useRef","imageRef","videoRef","canvasRef","imgcanvasRef","closeWebcam","current","srcObject","localStream","getTracks","forEach","track","stop","alert","renderPrediction","boxes_data","scores_data","classes_data","ctx","getContext","clearRect","canvas","width","font","textBaseline","i","length","klass","labels","score","toFixed","slice","x1","y1","x2","y2","color","strokeStyle","lineWidth","strokeRect","fillStyle","textWidth","measureText","textHeight","parseInt","fillRect","fillText","renderPredictionImage","detectFrame","a","startScope","inputs","shape","modelWidth","modelHeight","input","resizeBilinear","fromPixels","div","expandDims","executeAsync","then","res","boxes","scores","classes","dataSync","reqId","requestAnimationFrame","endScope","detectImage","setModelLoadingOn","location","origin","onProgress","fractions","yolov5","dummyInput","warmupResult","setModelLoadingOff","console","log","marginTop","id","display","playsInline","ref","navigator","mediaDevices","getUserMedia","audio","video","facingMode","stream","onloadedmetadata","cancelAnimationFrame","disabled","type","accept","onChange","e","target","files","f","URL","createObjectURL","onload","revokeObjectURL","App","setisModelLoading","path","element","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.fb89a07b.chunk.js","sourcesContent":["import React, {useState,useEffect} from 'react';\r\nimport './Navbar.css';\r\n\r\nconst Navbar = (props) => {\r\n    const [click,setClick] = useState(false);\r\n    const [button,setButton] = useState(true);\r\n    \r\n    const handleClick = () => setClick(!click);\r\n    const closeMobileMenu = () => setClick(false);\r\n    const showButton = () => \r\n    {\r\n        if(window.innerWidth <= 960)\r\n        {\r\n            setButton(false)\r\n        }\r\n        else{\r\n            setButton(true)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        showButton();\r\n    },[]);\r\n\r\n    window.addEventListener('resize',showButton)\r\n\r\n    return (\r\n        <>\r\n            <nav className=\"navbar\">\r\n                <div className=\"navbar-container\">\r\n                    <a href=\"/\" className=\"navbar-logo\" onClick={closeMobileMenu}>\r\n                        <i className=\"fas fa-head-side-mask\"></i>\r\n                    </a>\r\n                    <div className=\"menu-icon\" onClick={handleClick}>\r\n                        <i className={click ? 'fas fa-times' : 'fas fa-bars'}/> \r\n                    </div>\r\n                    <ul className={click ? 'nav-menu active' : 'nav-menu'}>\r\n                        <li className='nav-item'>\r\n                            <a href='/' className='nav-links' onClick={closeMobileMenu}>About</a>\r\n                        </li>\r\n                        <li className='nav-item'>\r\n                            <a href='/model#' className='nav-links' onClick={closeMobileMenu}>Live</a>\r\n                        </li>\r\n                        <li className='nav-item'>\r\n                            <a href='/model#image' className='nav-links' onClick={closeMobileMenu}>Image</a>\r\n                        </li>    \r\n                    </ul>\r\n                </div>\r\n                {\r\n                    props.isModelLoading ?\r\n                    <div className=\"loader-container\" >\r\n                        <p>Loading model</p>\r\n                    </div>\r\n                    :\r\n                    null\r\n                }\r\n            </nav>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Navbar\r\n","import './About.css'\r\n\r\nconst About = () => {\r\n  return (\r\n    <div style={{height:'100vh', backgroundColor:'#2d3748'}}>\r\n    <div className=\"hero-container\">\r\n      <video src='/videos/video-2.mp4' autoPlay loop muted className='hero-video'/>\r\n    </div>\r\n    <div className=\"about-container\" >\r\n      <div className=\"title\">\r\n        About the Model\r\n      </div>\r\n      <ul className=\"body\">\r\n        <li>\r\n          This computer vision model was trained to detect and classify whether a human is wearing a mask or not with bounding box annotations\r\n        </li>\r\n        <li> \r\n          As such, the model contains two classes: mask and no_mask. \r\n          Each prediction is displayed with it's corresponding confidence threshold [25%-100%]  \r\n        </li>\r\n        <li>\r\n          Trained on the YoloV5 architecture using transfer learning from the YoloV5s model\r\n        </li>\r\n        <li>\r\n          Trained via Google Colab using a P100 GPU taking 3.5 hours\r\n        </li>\r\n        <li>\r\n          Trained on over 2,700 images containing over 3,000 annotations\r\n        </li>\r\n        <li>\r\n          Model was tested on 680 validation images that were withheld from the training set\r\n        </li>\r\n        <li>\r\n          Achieved 88% precision and 89% recall when tested on the validation images\r\n        </li>\r\n      </ul>\r\n      <div className='about-btn-container'>\r\n        <a href=\"/model\">\r\n          <button className=\"about-btn\">\r\n            Test the model\r\n          </button>          \r\n        </a>\r\n      </div>\r\n    </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default About;","import React, { useState, useEffect, useRef } from \"react\";\r\nimport * as tf from \"@tensorflow/tfjs\";\r\nimport \"@tensorflow/tfjs-backend-webgl\";\r\nimport labels from \"./labels.json\";\r\nimport \"./Live.css\";\r\n\r\ntf.enableProdMode();\r\n\r\nconst Live = (props) => {\r\n  const [model, setModel] = useState(null);\r\n  const [webcam, setWebcam] = useState(\"close\");\r\n  const [image, setImage] = useState(\"close\");\r\n  const [loading, setLoading] = useState({ state: \"loading\", progress: 0 });\r\n  const [aniId, setAniId] = useState(null);\r\n  const threshold= 0.25;\r\n  const inputImage = useRef(null);\r\n  const imageRef = useRef(null);\r\n  const videoRef = useRef(null);\r\n  const canvasRef = useRef(null);\r\n  const imgcanvasRef = useRef(null);\r\n\r\n  const openWebcam = () => {\r\n    if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\r\n      navigator.mediaDevices\r\n        .getUserMedia({\r\n          audio: false,\r\n          video: {\r\n            facingMode: \"environment\",\r\n          },\r\n        })\r\n        .then((stream) => {\r\n          window.localStream = stream;\r\n          videoRef.current.srcObject = stream;\r\n          setWebcam(\"open\");\r\n          videoRef.current.onloadedmetadata = () => {\r\n            detectFrame();\r\n          };\r\n        });\r\n    } else alert(\"Can't open Webcam!\");\r\n  };\r\n\r\n  const closeWebcam = () => {\r\n    if (videoRef.current.srcObject) {\r\n      videoRef.current.srcObject = null;\r\n      window.localStream.getTracks().forEach((track) => {\r\n        track.stop();\r\n      });\r\n      setWebcam(\"close\");\r\n    } else alert(\"Please open Webcam first!\");\r\n  };\r\n\r\n  const closeImage = () => {\r\n    if (imageRef.current.src) {\r\n      imageRef.current.src = null;\r\n      setImage(\"close\");\r\n    } else alert(\"No Image to close\");\r\n  }\r\n\r\n  const renderPrediction = (boxes_data, scores_data, classes_data) => {\r\n    const ctx = canvasRef.current.getContext(\"2d\");\r\n    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height); // Clean canvas\r\n\r\n    const font = \"16px sans-serif\";\r\n    ctx.font = font;\r\n    ctx.textBaseline = \"top\";\r\n\r\n    for (let i = 0; i < scores_data.length; ++i) {\r\n      if (scores_data[i] > threshold) {\r\n        const klass = labels[classes_data[i]];\r\n        const score = (scores_data[i] * 100).toFixed(1);\r\n\r\n        let [x1, y1, x2, y2] = boxes_data.slice(i * 4, (i + 1) * 4);\r\n        x1 *= canvasRef.current.width;\r\n        x2 *= canvasRef.current.width;\r\n        y1 *= canvasRef.current.height;\r\n        y2 *= canvasRef.current.height;\r\n        const width = x2 - x1;\r\n        const height = y2 - y1;\r\n        const color = (klass == 'no_mask') ? \"#fc031c\" : \"#03fc0b\";\r\n\r\n        // Draw the bounding box.\r\n        ctx.strokeStyle = color;\r\n        ctx.lineWidth = 2;\r\n        ctx.strokeRect(x1, y1, width, height);\r\n\r\n        // Draw the label background.\r\n        ctx.fillStyle = color;\r\n        const textWidth = ctx.measureText(klass + \" - \" + score + \"%\").width;\r\n        const textHeight = parseInt(font, 10); // base 10\r\n        ctx.fillRect(x1 - 1, y1 - (textHeight + 2), textWidth + 2, textHeight + 2);\r\n\r\n        // Draw labels\r\n        ctx.fillStyle = \"#ffffff\";\r\n        ctx.fillText(klass + \" - \" + score + \"%\", x1 - 1, y1 - (textHeight + 2));\r\n      }\r\n    }\r\n  };\r\n\r\n  const renderPredictionImage = (boxes_data, scores_data, classes_data) => {\r\n    const ctx = imgcanvasRef.current.getContext(\"2d\");\r\n    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height); // Clean canvas\r\n\r\n    const font = \"16px sans-serif\";\r\n    ctx.font = font;\r\n    ctx.textBaseline = \"top\";\r\n\r\n    for (let i = 0; i < scores_data.length; ++i) {\r\n      if (scores_data[i] > threshold) {\r\n        const klass = labels[classes_data[i]];\r\n        const score = (scores_data[i] * 100).toFixed(1);\r\n\r\n        let [x1, y1, x2, y2] = boxes_data.slice(i * 4, (i + 1) * 4);\r\n        x1 *= imgcanvasRef.current.width;\r\n        x2 *= imgcanvasRef.current.width;\r\n        y1 *= imgcanvasRef.current.height;\r\n        y2 *= imgcanvasRef.current.height;\r\n        const width = x2 - x1;\r\n        const height = y2 - y1;\r\n        const color = (klass == 'no_mask') ? \"#fc031c\" : \"#03fc0b\";\r\n\r\n        // Draw the bounding box.\r\n        ctx.strokeStyle = color;\r\n        ctx.lineWidth = 2;\r\n        ctx.strokeRect(x1, y1, width, height);\r\n\r\n        // Draw the label background.\r\n        ctx.fillStyle = color;\r\n        const textWidth = ctx.measureText(klass + \" - \" + score + \"%\").width;\r\n        const textHeight = parseInt(font, 10); // base 10\r\n        ctx.fillRect(x1 - 1, y1 - (textHeight + 2), textWidth + 2, textHeight + 2);\r\n\r\n        // Draw labels\r\n        ctx.fillStyle = \"#ffffff\";\r\n        ctx.fillText(klass + \" - \" + score + \"%\", x1 - 1, y1 - (textHeight + 2));\r\n      }\r\n    }\r\n  };\r\n\r\n  const detectFrame = async () => {\r\n    if (videoRef.current.srcObject) {\r\n      tf.engine().startScope();\r\n      let [modelWidth, modelHeight] = model.inputs[0].shape.slice(1, 3);\r\n      const input = tf.tidy(() => {\r\n        return tf.image\r\n          .resizeBilinear(tf.browser.fromPixels(videoRef.current), [modelWidth, modelHeight])\r\n          .div(255.0)\r\n          .expandDims(0);\r\n      });\r\n\r\n      await model.executeAsync(input).then((res) => {\r\n        const [boxes, scores, classes] = res.slice(0, 3);\r\n        const boxes_data = boxes.dataSync();\r\n        const scores_data = scores.dataSync();\r\n        const classes_data = classes.dataSync();\r\n        renderPrediction(boxes_data, scores_data, classes_data);\r\n        tf.dispose(res);\r\n      });\r\n\r\n      const reqId = requestAnimationFrame(detectFrame);\r\n      setAniId(reqId);\r\n      tf.engine().endScope();\r\n    }\r\n  };\r\n\r\n  const detectImage = async () => {\r\n    tf.engine().startScope();\r\n    let [modelWidth, modelHeight] = model.inputs[0].shape.slice(1, 3);\r\n    const input = tf.tidy(() => {\r\n      return tf.image\r\n        .resizeBilinear(tf.browser.fromPixels(imageRef.current), [modelWidth, modelHeight])\r\n        .div(255.0)\r\n        .expandDims(0);\r\n    });\r\n\r\n    await model.executeAsync(input).then((res) => {\r\n      const [boxes, scores, classes] = res.slice(0, 3);\r\n      const boxes_data = boxes.dataSync();\r\n      const scores_data = scores.dataSync();\r\n      const classes_data = classes.dataSync();\r\n      \r\n      renderPredictionImage(boxes_data, scores_data, classes_data);\r\n      tf.dispose(res);\r\n    });\r\n    tf.engine().endScope();\r\n  };\r\n\r\n  useEffect(() => {\r\n    props.setModelLoadingOn();\r\n    setLoading({ state: \"loading\", progress: 0 });\r\n    tf.loadGraphModel(`${window.location.origin}/face-mask-model_web_model/model.json`, {\r\n      onProgress: (fractions) => {\r\n        setLoading({ state: \"loading\", progress: fractions });\r\n      },\r\n    }).then(async (yolov5) => {\r\n      // Warmup the model before using real data.\r\n      const dummyInput = tf.ones(yolov5.inputs[0].shape);\r\n      await yolov5.executeAsync(dummyInput).then((warmupResult) => {\r\n        tf.dispose(warmupResult);\r\n        tf.dispose(dummyInput);\r\n\r\n        setModel(yolov5);\r\n        props.setModelLoadingOff();\r\n        setLoading({ state: \"ready\", progress: 1 });\r\n        console.log(\"model loaded\")\r\n      });\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n    <div className=\"Live\" style={props.isModelLoading ? {marginTop:'40px'} : {marginTop:'20px'}}>\r\n      <div className='title' id='live'>\r\n        Webcam\r\n      </div>\r\n      <ul className=\"webcam-ul\">\r\n        <li>\r\n          Test the model with your device's webcam\r\n        </li>\r\n      </ul>\r\n      <div className=\"content\">\r\n        <div className=\"main\" >\r\n          <video\r\n            style={{ display: webcam === \"open\" ? \"block\" : \"none\" }}\r\n            autoPlay\r\n            playsInline\r\n            muted\r\n            ref={videoRef}\r\n            className=\"main-video\"\r\n          />\r\n          <canvas\r\n            width={640}\r\n            height={360}\r\n            style={{\r\n              display: webcam === \"open\" ? \"block\" : \"none\",\r\n            }}\r\n            ref={canvasRef}\r\n            className=\"main-canvas\"\r\n          />\r\n          <img\r\n            width={360}\r\n            height={360}\r\n            className=\"temp-img\"\r\n            style={{\r\n              display: webcam === \"open\" ? \"none\" : \"block\",\r\n            }}\r\n            src='temp-webcam-img.jpg'\r\n          />\r\n        </div>\r\n        <div className=\"btnWrapper\">\r\n          <button\r\n            className={webcam === \"open\" ? \"active\" : \"nonActive\"}\r\n            onClick={() => {\r\n              if (webcam === \"close\") {\r\n                openWebcam();\r\n              } else {\r\n                cancelAnimationFrame(aniId);\r\n                setAniId(null);\r\n                closeWebcam();\r\n              }\r\n            }}\r\n            disabled={loading.state === \"ready\" ? false : true}\r\n          >\r\n            {webcam === \"open\" ? \"Close\" : \"Activate\"} Webcam\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div className=\"image-container\" id=\"image\">\r\n      <div className='title'>\r\n        Image\r\n      </div>\r\n      <ul className=\"webcam-ul\">\r\n        <li>\r\n          Test the model out on an image from your system\r\n        </li>\r\n        <li>\r\n          <em>Webcam must be closed when predicting on an image</em>\r\n        </li>\r\n      </ul>\r\n      <div className='content'>\r\n          <img\r\n            style={{ display: image === \"open\" ? \"block\" : \"none\" }}\r\n            ref={imageRef}\r\n            className=\"main-img\"\r\n          />\r\n          <canvas\r\n            style={{\r\n              display: image === \"open\" ? \"block\" : \"none\",\r\n            }}\r\n            width={360}\r\n            height={360}\r\n            ref={imgcanvasRef}\r\n            className=\"main-canvas-img\"\r\n          />\r\n          <img\r\n            width={360}\r\n            height={360}\r\n            className=\"temp-img\"\r\n            style={{\r\n              display: image === \"open\" ? \"none\" : \"block\",\r\n            }}\r\n            src='temp-picture-img.jpg'\r\n          />\r\n          <div className=\"btnWrapper\">\r\n            <input\r\n              type=\"file\"\r\n              ref={inputImage}\r\n              accept=\"image/*\"\r\n              style={{ display: \"none\" }}\r\n              onChange={(e) => {\r\n                console.log('image opened')\r\n                if (e.target.files[0] !== null && e.target.files.length !== 0) {\r\n                  const f = e.target.files[0];\r\n                  const src = window.URL.createObjectURL(f);\r\n                  imageRef.current.src = src;\r\n                  setImage(\"open\");\r\n                  console.log(image)\r\n                  imageRef.current.onload = () => {\r\n                    detectImage();\r\n                    window.URL.revokeObjectURL(src);\r\n                  };\r\n                }\r\n              }}\r\n            />\r\n            <button\r\n              className=\"nonActive\"\r\n              disabled={loading.state === \"ready\" ? false : true}\r\n              onClick={() => {\r\n                if (webcam === \"open\"){\r\n                  closeWebcam()\r\n                }\r\n                inputImage.current.click();\r\n              }}\r\n            >\r\n              {image === \"open\" ? \"New\" : \"Upload\"} Image\r\n            </button>\r\n            {\r\n              image === \"open\" ?\r\n              <button\r\n                className=\"closeImage\"\r\n                onClick={\r\n                  () => {\r\n                    closeImage()\r\n                  }\r\n                }\r\n              >\r\n                Close Image\r\n              </button>\r\n              :\r\n              null\r\n            }\r\n          </div>\r\n      </div>\r\n    </div>\r\n    <div className='rest'>\r\n    </div>\r\n    </>\r\n);\r\n\r\n};\r\n\r\nexport default Live;","import React, { useState } from 'react';\nimport Navbar from './components/Navbar/Navbar';\nimport About from './components/About/About';\nimport Live from './components/Live/Live';\nimport {Route, Routes } from \"react-router-dom\";\nimport './App.css';\n\nconst App = () => {\n  const [isModelLoading, setisModelLoading] = useState(false);\n\n  const setModelLoadingOn = () => {\n    setisModelLoading(true);\n  };\n  \n  const setModelLoadingOff = () => {\n    setisModelLoading(false);\n  };\n\n  return (\n      <div className=\"App\" id=\"about\">\n        <Navbar isModelLoading={isModelLoading}/>\n        <Routes>\n          <Route path='/' element={<About/>}/>\n          <Route path='/model' element={<Live isModelLoading={isModelLoading} setModelLoadingOn={setModelLoadingOn} setModelLoadingOff={setModelLoadingOff} />}/>\n        </Routes>\n      </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport {HashRouter} from \"react-router-dom\";\n\nReactDOM.render(\n  <HashRouter>\n    <App />\n  </HashRouter>\n  ,\n  document.getElementById('root')\n);"],"sourceRoot":""}